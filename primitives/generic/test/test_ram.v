/* Generated by Yosys 0.8+317 (git sha1 0deaccb, clang 3.8.0-2ubuntu4 -fPIC -Os) */

(* top =  1  *)
(* src = "test_ram_as_DxW_rwrw_p1p1.sv:3" *)
module test_ram_as_DxW_rwrw_p1p1(clock_a, address_a, wren_a, data_a, q_a, clock_b, address_b, wren_b, data_b, q_b);
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:5" *)
  input [31:0] address_a;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:11" *)
  input [31:0] address_b;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:4" *)
  input clock_a;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:10" *)
  input clock_b;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:7" *)
  input [31:0] data_a;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:13" *)
  input [31:0] data_b;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:8" *)
  output [31:0] q_a;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:14" *)
  output [31:0] q_b;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:26" *)
  wire [10:0] \u_ram.address_a ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:33" *)
  wire [10:0] \u_ram.address_b ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:24" *)
  wire \u_ram.clock_a ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:31" *)
  wire \u_ram.clock_b ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:28" *)
  wire [7:0] \u_ram.data_a ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:35" *)
  wire [7:0] \u_ram.data_b ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:29" *)
  wire [7:0] \u_ram.q_a ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:36" *)
  wire [7:0] \u_ram.q_b ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:27" *)
  wire \u_ram.wren_a ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:22|../ram_as_DxW_rwrw_p1p1.sv:34" *)
  wire \u_ram.wren_b ;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:6" *)
  input wren_a;
  (* src = "test_ram_as_DxW_rwrw_p1p1.sv:12" *)
  input wren_b;
  reg [7:0] \u_ram.ram0  [2047:0];
  reg [7:0] _0_;
  reg [7:0] _1_;
  always @(posedge clock_a) begin
    _1_ <= \u_ram.ram0 [address_a[10:0]];
    if (wren_a) \u_ram.ram0 [address_a[10:0]] <= data_a[7:0];
  end
  always @(posedge clock_b) begin
    _0_ <= \u_ram.ram0 [address_b[10:0]];
    if (wren_b) \u_ram.ram0 [address_b[10:0]] <= data_b[7:0];
  end
  assign \u_ram.q_b  = _0_;
  assign \u_ram.q_a  = _1_;
  assign q_a = { 24'hxxxxxx, \u_ram.q_a  };
  assign q_b = { 24'hxxxxxx, \u_ram.q_b  };
  assign \u_ram.address_a  = address_a[10:0];
  assign \u_ram.address_b  = address_b[10:0];
  assign \u_ram.clock_a  = clock_a;
  assign \u_ram.clock_b  = clock_b;
  assign \u_ram.data_a  = data_a[7:0];
  assign \u_ram.data_b  = data_b[7:0];
  assign \u_ram.wren_a  = wren_a;
  assign \u_ram.wren_b  = wren_b;
endmodule
